{
  "name": "YouTube Creator Finder with Contact Info",
  "nodes": [
    {
      "parameters": {},
      "id": "f6c8c5b0-8c5a-4c5a-8c5a-8c5a8c5a8c5a",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/youtube/v3/search?part=snippet&q={{ encodeURIComponent($json.searchTopic || 'personal finance') }}&type=video&order=relevance&maxResults=50&key={{ $env.YOUTUBE_API_KEY }}",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-4789-abcd-ef1234567890",
      "name": "YouTube Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract unique channel IDs from search results\nconst channelIds = new Set();\n\nfor (const item of items) {\n  if (item.json.items) {\n    for (const video of item.json.items) {\n      if (video.snippet && video.snippet.channelId) {\n        channelIds.add(video.snippet.channelId);\n      }\n    }\n  }\n}\n\n// Return array of channel IDs (max 50 per API call)\nconst channelIdArray = Array.from(channelIds).slice(0, 50);\n\nreturn [{\n  json: {\n    channelIds: channelIdArray,\n    channelIdString: channelIdArray.join(',')\n  }\n}];"
      },
      "id": "b2c3d4e5-f6g7-4890-bcde-f12345678901",
      "name": "Extract Channel IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/youtube/v3/channels?part=snippet,statistics&id={{ $json.channelIdString }}&key={{ $env.YOUTUBE_API_KEY }}",
        "options": {}
      },
      "id": "c3d4e5f6-g7h8-4901-cdef-g23456789012",
      "name": "Get Channel Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Filter channels based on subscriber range\nconst results = [];\n\n// Get subscriber range from the original trigger input using the correct n8n pattern\nconst triggerData = $node[\"Manual Trigger\"].json;\nconst minSubscribers = triggerData.minSubscribers;\nconst maxSubscribers = triggerData.maxSubscribers;\n\nconsole.log(`Filtering with range: ${minSubscribers.toLocaleString()} - ${maxSubscribers.toLocaleString()}`);\n\nfor (const item of items) {\n  if (item.json.items) {\n    for (const channel of item.json.items) {\n      const subscriberCount = parseInt(channel.statistics.subscriberCount) || 0;\n      \n      if (subscriberCount >= minSubscribers && subscriberCount <= maxSubscribers) {\n        results.push({\n          json: {\n            channelId: channel.id,\n            channelTitle: channel.snippet.title,\n            subscriberCount: subscriberCount,\n            description: channel.snippet.description,\n            customUrl: channel.snippet.customUrl || '',\n            channelUrl: `https://www.youtube.com/channel/${channel.id}`,\n            aboutUrl: `https://www.youtube.com/channel/${channel.id}/about`,\n            thumbnails: channel.snippet.thumbnails\n          }\n        });\n      }\n    }\n  }\n}\n\nconsole.log(`Found ${results.length} channels with ${minSubscribers.toLocaleString()} - ${maxSubscribers.toLocaleString()} subscribers`);\nreturn results;"
      },
      "id": "d4e5f6g7-h8i9-4012-defg-h34567890123",
      "name": "Filter Subscriber Range",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Final formatting - basic channel information without web scraping\nconst results = [];\nlet totalChannels = 0;\n\nfor (const item of items) {\n  totalChannels++;\n  \n  // Get channel data directly from the filtered results\n  const subscriberCount = item.json.subscriberCount || 0;\n  const channelTitle = item.json.channelTitle || 'Unknown Channel';\n  const channelUrl = item.json.channelUrl || '';\n  const channelId = item.json.channelId || '';\n  const aboutUrl = item.json.aboutUrl || '';\n  const description = item.json.description || '';\n  const customUrl = item.json.customUrl || '';\n  \n  const finalResult = {\n    rank: totalChannels,\n    channelInfo: {\n      title: channelTitle,\n      subscribers: subscriberCount ? subscriberCount.toLocaleString() : '0',\n      subscriberCount: subscriberCount,\n      url: channelUrl,\n      channelId: channelId,\n      aboutUrl: aboutUrl,\n      customUrl: customUrl,\n      description: description.substring(0, 200) + (description.length > 200 ? '...' : '')\n    },\n    contactInfo: {\n      note: 'Contact information scraping disabled - would require more complex data handling',\n      aboutPageUrl: aboutUrl,\n      suggestion: 'Visit the about page manually to find contact information'\n    },\n    searchMetadata: {\n      extractedAt: new Date().toISOString(),\n      scrapingEnabled: false,\n      reason: 'HTTP Request node data handling complexity'\n    }\n  };\n  \n  results.push({ json: finalResult });\n}\n\nconsole.log(`Final results: ${totalChannels} channels formatted`);\nreturn results;"
      },
      "id": "h8i9j0k1-l2m3-4456-hijk-l78901234567",
      "name": "Format Final Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        180
      ]
    },
    {
      "parameters": {
        "jsCode": "// Create summary of the search - without contact extraction\nconst channelCount = items.length;\n\n// Get search parameters from the original trigger using correct n8n pattern\nconst triggerData = $node[\"Manual Trigger\"].json;\nconst searchTopic = triggerData.searchTopic;\nconst minSubs = triggerData.minSubscribers;\nconst maxSubs = triggerData.maxSubscribers;\n\nconst summary = {\n  searchSummary: {\n    searchTopic: searchTopic,\n    subscriberRange: {\n      min: minSubs.toLocaleString(),\n      max: maxSubs.toLocaleString()\n    },\n    timestamp: new Date().toISOString(),\n    channelsFound: channelCount,\n    contactExtractionEnabled: false,\n    note: 'Contact information extraction requires additional workflow complexity'\n  },\n  topChannels: items.slice(0, 10).map((item, index) => ({\n    rank: index + 1,\n    title: item.json.channelTitle || 'Unknown Channel',\n    subscribers: (item.json.subscriberCount || 0).toLocaleString(),\n    subscriberCount: item.json.subscriberCount || 0,\n    channelUrl: item.json.channelUrl || '',\n    aboutUrl: item.json.aboutUrl || '',\n    description: (item.json.description || '').substring(0, 200) + ((item.json.description || '').length > 200 ? '...' : '')\n  })),\n  instructions: {\n    contactExtraction: 'To get contact information, visit the aboutUrl for each channel manually',\n    automation: 'For automated contact extraction, consider using external scraping tools or services'\n  }\n};\n\nreturn [{ json: summary }];"
      },
      "id": "i9j0k1l2-m3n4-4567-ijkl-m89012345678",
      "name": "Create Search Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        420
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "YouTube Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Search": {
      "main": [
        [
          {
            "node": "Extract Channel IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Channel IDs": {
      "main": [
        [
          {
            "node": "Get Channel Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Channel Details": {
      "main": [
        [
          {
            "node": "Filter Subscriber Range",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Subscriber Range": {
      "main": [
        [
          {
            "node": "Format Final Results",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Search Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Manual Trigger": [
      {
        "json": {
          "searchTopic": "personal finance",
          "minSubscribers": 50000,
          "maxSubscribers": 1000000
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-02T00:00:00.000Z",
  "versionId": "1"
}